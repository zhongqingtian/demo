// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello_world.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//接口请求入参
type HelloRequest struct {
	Request              string   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09d5cabe4ebc959, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

//接口返回出参
type HelloResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09d5cabe4ebc959, []int{1}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "proto.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "proto.HelloResponse")
}

func init() { proto.RegisterFile("hello_world.proto", fileDescriptor_a09d5cabe4ebc959) }

var fileDescriptor_a09d5cabe4ebc959 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x48, 0xcd, 0xc9,
	0xc9, 0x8f, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x53, 0x4a, 0x1a, 0x5c, 0x3c, 0x1e, 0x20, 0xb9, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21,
	0x09, 0x2e, 0xf6, 0x22, 0x08, 0x53, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc6, 0x55, 0xd2,
	0xe6, 0xe2, 0x85, 0xaa, 0x2c, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe2, 0xe2, 0x28, 0x82,
	0xb2, 0xa1, 0x6a, 0xe1, 0x7c, 0xa3, 0xf5, 0x4c, 0x50, 0x73, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93,
	0x53, 0x85, 0x2c, 0xb9, 0xb8, 0xc0, 0xfc, 0x70, 0x90, 0x13, 0x84, 0x84, 0x21, 0x8e, 0xd0, 0x43,
	0xb6, 0x5a, 0x4a, 0x04, 0x55, 0x10, 0x62, 0x92, 0x12, 0x83, 0x90, 0x3b, 0x97, 0x18, 0x42, 0x2b,
	0xc8, 0xbc, 0xd4, 0xa2, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0x92, 0x8c, 0x31, 0x60, 0x44, 0x35,
	0xc8, 0x39, 0x27, 0x33, 0x35, 0xaf, 0x84, 0x0c, 0x83, 0x34, 0x18, 0x85, 0x82, 0xb8, 0xe4, 0xd1,
	0x0d, 0x72, 0xcc, 0x23, 0xdf, 0x69, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x29, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xab, 0x75, 0x5d, 0xab, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	//一个简单的rpc
	HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	//一个服务器端流式rpc
	HelloWorldServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloWorldServerStreamClient, error)
	//一个客户端流式rpc
	HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientStreamClient, error)
	//一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientAndServerStreamClient, error)
}

type helloServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.HelloService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) HelloWorldServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloWorldServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/proto.HelloService/HelloWorldServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_HelloWorldServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[1], "/proto.HelloService/HelloWorldClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldClientStreamClient{stream}
	return x, nil
}

type HelloService_HelloWorldClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldClientStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientAndServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[2], "/proto.HelloService/HelloWorldClientAndServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldClientAndServerStreamClient{stream}
	return x, nil
}

type HelloService_HelloWorldClientAndServerStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldClientAndServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldClientAndServerStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientAndServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	//一个简单的rpc
	HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error)
	//一个服务器端流式rpc
	HelloWorldServerStream(*HelloRequest, HelloService_HelloWorldServerStreamServer) error
	//一个客户端流式rpc
	HelloWorldClientStream(HelloService_HelloWorldClientStreamServer) error
	//一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(HelloService_HelloWorldClientAndServerStreamServer) error
}

// UnimplementedHelloServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (*UnimplementedHelloServiceServer) HelloWorld(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (*UnimplementedHelloServiceServer) HelloWorldServerStream(req *HelloRequest, srv HelloService_HelloWorldServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldServerStream not implemented")
}
func (*UnimplementedHelloServiceServer) HelloWorldClientStream(srv HelloService_HelloWorldClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientStream not implemented")
}
func (*UnimplementedHelloServiceServer) HelloWorldClientAndServerStream(srv HelloService_HelloWorldClientAndServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientAndServerStream not implemented")
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HelloService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).HelloWorld(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_HelloWorldServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).HelloWorldServerStream(m, &helloServiceHelloWorldServerStreamServer{stream})
}

type HelloService_HelloWorldServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloServiceHelloWorldServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_HelloWorldClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloWorldClientStream(&helloServiceHelloWorldClientStreamServer{stream})
}

type HelloService_HelloWorldClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloWorldClientStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_HelloWorldClientAndServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloWorldClientAndServerStream(&helloServiceHelloWorldClientAndServerStreamServer{stream})
}

type HelloService_HelloWorldClientAndServerStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloWorldClientAndServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldClientAndServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientAndServerStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _HelloService_HelloWorld_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloWorldServerStream",
			Handler:       _HelloService_HelloWorldServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloWorldClientStream",
			Handler:       _HelloService_HelloWorldClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloWorldClientAndServerStream",
			Handler:       _HelloService_HelloWorldClientAndServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello_world.proto",
}
